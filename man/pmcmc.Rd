% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pmcmc.R
\name{pmcmc}
\alias{pmcmc}
\title{Run a pmcmc sampler}
\usage{
pmcmc(
  data,
  n_mcmc,
  sircovid_model,
  model_params = NULL,
  pars_obs = list(phi_general = 0.95, k_general = 2, phi_ICU = 0.95, k_ICU = 2,
    phi_death = 926/1019, k_death = 2, exp_noise = 1e+06),
  pars_init = list(beta = 0.14, start_date = as.Date("2020-02-07")),
  pars_min = list(beta = 0, start_date = 0),
  pars_max = list(beta = 1, start_date = 1e+06),
  cov_mat = matrix(c(0.001^2, 0, 0, 0.5^2), nrow = 2, byrow = TRUE, dimnames =
    list(c("beta", "start_date"), c("beta", "start_date"))),
  pars_discrete = list(beta = FALSE, start_date = TRUE),
  log_likelihood = NULL,
  log_prior = NULL,
  n_particles = 100,
  steps_per_day = 4
)
}
\arguments{
\item{data}{Data to fit to.  This must be constructed with
\code{particle_filter_data}}

\item{n_mcmc}{number of mcmc mcmc iterations to perform}

\item{sircovid_model}{An odin model generator and comparison function.}

\item{model_params}{Model parameters, from a call to
\code{generate_parameters()}. If NULL, uses defaults as
in unit tests.}

\item{pars_obs}{list of parameters to use in comparison
with \code{compare_icu}. If NULL, uses
list(phi_general = 0.95, k_general = 2,phi_ICU = 0.95, k_ICU = 2, phi_death = 926 / 1019, k_death = 2, exp_noise = 1e6)}

\item{pars_init}{named list of initial inputs for parameters being sampled (currently beta and start_date)}

\item{pars_min}{named list of lower reflecting boundaries for parameter proposals}

\item{pars_max}{named list of upper reflecting boundaries for parameter proposals}

\item{cov_mat}{named matrix of proposal covariance for parameters}

\item{pars_discrete}{named list of logicals, indicating if proposed jump should be discrete}

\item{log_likelihood}{function to calculate log likelihood, must take named parameter vector as input, 
allow passing of implicit arguments corresponding to the main function arguments. 
Returns a named list, with entries:
  - $log_likelihood, a single numeric
  - $sample_state, a numeric vector corresponding to the state of a single particle, chosen at random, 
  at the final time point for which we have data.
  If NULL, calculated using the function calc_loglikelihood.}

\item{log_prior}{function to calculate log prior, must take named parameter vector as input, returns a single numeric.
If NULL, uses uninformative priors which do not affect the posterior}

\item{n_particles}{Number of particles}

\item{steps_per_day}{Number of steps per day}
}
\value{
list of length two containing
- List of inputs
- Matrix of accepted parameter samples, rows = iterations
  as well as log prior, (particle filter estimate of) log likelihood and log posterior
}
\description{
The user inputs initial parameter values for beta and sample_date
The log prior likelihood of these parameters is calculated based on the user-defined
prior distributions.
The log likelihood of the data given the initial parameters is estimated using a particle filter,
which has two functions:
     - Firstly, to generate a set of 'n_particles' samples of the model state space,
       at time points corresponding to the data, one of which is 
       selected randomly to serve as the proposed state sequence sample at the final
       data time point.
     - Secondly, to produce an unbiased estimate of the likelihood of the data given the proposed parameters. 
The log posterior of the initial parameters given the data is then estimated by adding the log prior and 
log likelihood estimate.

The pMCMC sampler then proceeds as follows, for n_mcmc iterations:
At each loop iteration the pMCMC sampler perfsorms three steps:
  1. Propose new candidate samples for beta and start_date based on
    the current samples, using the proposal distribution 
    (currently multivariate Gaussian with user-input covariance matrix (cov_mat), and reflecting boundaries defined by pars_min, pars_max)
  2. Calculate the log prior of the proposed parameters, 
     Use the particle filter to estimate log likelihood of the data given the proposed parameters, as described above,
     as well as proposing a model state space.
     Add the log prior and log likelihood estimate to estimate the log posterior of the proposed parameters given the data.
  3. Metropolis-Hastings step: The joint canditate sample (consisting of the proposed parameters 
     and state space) is then accepted with probability min(1, a), where the acceptance ratio is
     simply the ratio of the posterior likelihood of the proposed parameters to the posterior likelihood
     of the current parameters. Note that by choosing symmetric proposal distributions by including
     reflecting boundaries, we avoid the the need to include the proposal likelihood in the MH ratio.
     
  If the proposed parameters and states are accepted then we update the current parameters and states
  to match the proposal, otherwise the previous parameters/states are retained for the next iteration.
}
\details{
Run a pmcmc sampler
}
